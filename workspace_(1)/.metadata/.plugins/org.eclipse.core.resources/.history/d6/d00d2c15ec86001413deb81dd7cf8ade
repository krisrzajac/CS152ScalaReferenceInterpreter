import scala.util.parsing.combinator._

class RAMParsers extends RegexParsers {
  
 def instruction: Parser[Instruction] = add | block | branch | load | write
  
 
 def write: Parser[Write] = "write"~>integer ^^
  { case i => Write(i) }
  
  
  def index: Parser[Int] = """[0-7]""".r ^^ 
  { case i => i.toInt }
  
   def integer: Parser[Int] = """(\+|-)?[0-9]+""".r ^^
    {
    case i => i.toInt 
    }
  
  def add : Parser[Instruction] = "add"~index~","~index~","~index ^^
  {
    case "add"~index1~","~index2~","~index3 => new Add(index1,index2,index3)
  }
  
  
  def branch : Parser[Instruction] = "branch" ~ index~ "," ~ integer ^^
  {
    case "branch" ~ index~ "," ~ integer => Branch(index,integer)
  }
  
  def load : Parser[Instruction] = "load" ~ index~ "," ~ integer ^^
  {
    case "load" ~ index~ "," ~ integer => Load(index, integer)
  }
  def block : Parser[Instruction] = "{" ~ instruction ~ rep(";"~>instruction)<~"}" ^^
  {
    case t ~ Nil => Block(List(t))
    case t ~ rest =>Block(t::rest)
  }
  
     def conjunction: Parser[Expression] = equality ~ rep("&&" ~> equality) ^^
    {
      case t ~ Nil => t
      case t ~ rest => Conjunction(t :: rest)
    }

}